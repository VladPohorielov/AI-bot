"""
Simple Event Extract Handler for "–í–∏—Ç—è–≥–∞—Ç–∏ –ø–æ–¥—ñ—ó" button
"""
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "extract_events")
async def cq_extract_events_simple(callback: types.CallbackQuery, state: FSMContext):
    """
    Simple event extraction from text analysis
    """
    if not callback.from_user:
        return
    
    user_id = callback.from_user.id
    logger.info(f"üîç Extract events button pressed by user {user_id}")
    
    try:
        # Get last analyzed text from FSM data
        data = await state.get_data()
        last_text = data.get('last_analyzed_text', '')
        
        if not last_text:
            await callback.answer(
                "‚ùå –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
                show_alert=True
            )
            return
        
        # Show progress message
        if callback.message:
            await callback.message.edit_text(
                "üîç **–ê–ù–ê–õ–Ü–ó–£–Æ –ü–û–î–Ü–á**\n\n"
                "‚è≥ –®—É–∫–∞—é –ø–æ–¥—ñ—ó —É —Ç–µ–∫—Å—Ç—ñ...\n"
                "üìä –ê–Ω–∞–ª—ñ–∑—É—é –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å...\n"
                "üë• –í–∏–∑–Ω–∞—á–∞—é —É—á–∞—Å–Ω–∏–∫—ñ–≤...\n"
                "üîÑ –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
            )
        
        # Simple event extraction using existing GPT service
        try:
            from services.analysis import GPTAnalysisService
            gpt_service = GPTAnalysisService()
            
            # Use existing summarization to extract key points
            summary = await gpt_service.generate_summary_only(last_text)
            
            # Simple heuristic to detect if events are present
            event_keywords = ["–∑—É—Å—Ç—Ä—ñ—á", "–¥–∑–≤—ñ–Ω–æ–∫", "–Ω–∞—Ä–∞–¥–∞", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è", "–¥–µ–¥–ª–∞–π–Ω", "–∑–∞–≤—Ç—Ä–∞", "—Å—å–æ–≥–æ–¥–Ω—ñ", 
                            "–æ 14", "–æ 15", "–æ 16", "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", "–ø'—è—Ç–Ω–∏—Ü—è"]
            
            has_events = any(keyword in last_text.lower() for keyword in event_keywords)
            
            if has_events:
                result_text = (
                    "üéØ **–ó–ù–ê–ô–î–ï–ù–Ü –ü–û–¢–ï–ù–¶–Ü–ô–ù–Ü –ü–û–î–Ü–á**\n\n"
                    f"üìã **–ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç:**\n{summary}\n\n"
                    "üîç **–í–∏—è–≤–ª–µ–Ω–æ –æ–∑–Ω–∞–∫–∏ –ø–æ–¥—ñ–π:**\n"
                    "‚Ä¢ –ó–≥–∞–¥–∫–∏ –ø—Ä–æ —á–∞—Å —Ç–∞ –¥–∞—Ç–∏\n"
                    "‚Ä¢ –ü–ª–∞–Ω–æ–≤—ñ –∑–∞—Ö–æ–¥–∏\n"
                    "‚Ä¢ –ó—É—Å—Ç—Ä—ñ—á—ñ —Ç–∞ –Ω–∞—Ä–∞–¥–∏\n\n"
                    "üìÖ **–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ:**\n"
                    "1. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n"
                    "2. –ê–±–æ /connect_calendar –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Google Calendar\n\n"
                    "üí° –ë—ñ–ª—å—à —Ç–æ—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–µ–∂–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏."
                )
            else:
                result_text = (
                    "üìã **–ê–ù–ê–õ–Ü–ó –ó–ê–í–ï–†–®–ï–ù–û**\n\n"
                    f"üìù **–ö–æ—Ä–æ—Ç–∫–∏–π –∑–º—ñ—Å—Ç:**\n{summary}\n\n"
                    "üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –ø–æ–¥—ñ–π:**\n"
                    "–£ —Ç–µ–∫—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω–∏—Ö –ø–æ–¥—ñ–π –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n\n"
                    "üí° **–ü–æ—Ä–∞–¥–∏:**\n"
                    "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –¥–∞—Ç–∞–º–∏\n"
                    "‚Ä¢ –í–∫–∞–∂—ñ—Ç—å —á–∞—Å —Ç–∞ –º—ñ—Å—Ü–µ –∑–∞—Ö–æ–¥—ñ–≤\n"
                    "‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"
                )
            
            if callback.message:
                await callback.message.edit_text(result_text, reply_markup=create_simple_result_keyboard())
            
        except Exception as analysis_error:
            logger.error(f"Analysis error: {analysis_error}")
            
            if callback.message:
                await callback.message.edit_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É**\n\n"
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –ø–æ–¥—ñ–π.\n\n"
                    "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ /capture_chat –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É\n"
                    "‚Ä¢ /summary –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ\n"
                    "‚Ä¢ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç"
                )
        
        await callback.answer()
        logger.info(f"‚úÖ Simple event extraction completed for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Event extraction failed for user {user_id}: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π", show_alert=True)


def create_simple_result_keyboard():
    """Create simple keyboard for event extraction results"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑", callback_data="start_capture_mode")
    builder.button(text="üìÖ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä", callback_data="connect_calendar_from_settings")
    builder.button(text="üîÑ –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç", callback_data="request_new_analysis")
    
    return builder.as_markup()


@router.callback_query(F.data == "start_capture_mode")
async def cq_start_capture_mode(callback: types.CallbackQuery, state: FSMContext):
    """Start capture mode for detailed analysis"""
    await callback.answer(
        "üìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /capture_chat –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø–µ—Ä–µ–ø–∏—Å–æ–∫",
        show_alert=True
    )


@router.callback_query(F.data == "request_new_analysis")
async def cq_request_new_analysis(callback: types.CallbackQuery, state: FSMContext):
    """Request new text for analysis"""
    if callback.message:
        await callback.message.edit_text(
            "üìù **–ù–û–í–ò–ô –ê–ù–ê–õ–Ü–ó**\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–¥—ñ–π.\n\n"
            "üí° **–î–ª—è –∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∫–ª—é—á—ñ—Ç—å:**\n"
            "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å\n"
            "‚Ä¢ –ù–∞–∑–≤–∏ –∑–∞—Ö–æ–¥—ñ–≤\n"
            "‚Ä¢ –ú—ñ—Å—Ü—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è\n"
            "‚Ä¢ –Ü–º–µ–Ω–∞ —É—á–∞—Å–Ω–∏–∫—ñ–≤"
        )
    
    await callback.answer() 