"""
Handlers for Google Calendar connection and OAuth flow
"""
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from services.google_oauth import google_oauth
from keyboards.inline import get_calendar_connection_keyboard, get_calendar_disconnect_keyboard

router = Router()


@router.message(Command("connect_calendar"))
async def cmd_connect_calendar(message: types.Message, state: FSMContext):
    """
    Start Google Calendar connection process
    """
    user_id = message.from_user.id
    
    # Check if already connected
    is_connected = await google_oauth.check_user_connected(user_id)
    
    if is_connected:
        await message.answer(
            "‚úÖ <b>Google Calendar —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
            "üìÖ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–π.\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:",
            reply_markup=get_calendar_disconnect_keyboard()
        )
        return
    
    # Generate OAuth URL
    try:
        auth_url, state = google_oauth.generate_auth_url(user_id)
        
        await message.answer(
            "üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar</b>\n\n"
            "üìã –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
            "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ Google –∞–∫–∫–∞—É–Ω—Ç\n"
            "3Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
            "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
            f"üîê <b>–ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b> <code>{state}</code>\n"
            "üí° <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ - –æ–Ω –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</i>",
            reply_markup=get_calendar_connection_keyboard(auth_url, state)
        )
        
        # Store state in FSM for later verification
        await state.update_data(oauth_state=state)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.message(F.text.startswith("/oauth_callback"))
async def cmd_oauth_callback(message: types.Message, state: FSMContext):
    """
    Handle OAuth callback with authorization code
    Format: /oauth_callback CODE STATE
    """
    parts = message.text.split()
    
    if len(parts) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/oauth_callback –ö–û–î –°–û–°–¢–û–Ø–ù–ò–ï</code>\n"
            "–≥–¥–µ –ö–û–î - –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç Google, –∞ –°–û–°–¢–û–Ø–ù–ò–ï - –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )
        return
    
    auth_code = parts[1]
    oauth_state = parts[2]
    
    # Get stored state from FSM
    data = await state.get_data()
    stored_state = data.get('oauth_state')
    
    if not stored_state or stored_state != oauth_state:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π."
        )
        return
    
    # Exchange code for tokens
    try:
        await message.answer("üîÑ –û–±–º–µ–Ω–∏–≤–∞—é –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞...")
        
        tokens = await google_oauth.exchange_code_for_tokens(auth_code, oauth_state)
        
        if tokens:
            await message.answer(
                "‚úÖ <b>Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ —Å–µ—Å—Å–∏–π\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n\n"
                "üí° –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.",
                reply_markup=get_calendar_disconnect_keyboard()
            )
            
            # Clear OAuth state from FSM
            await state.update_data(oauth_state=None)
            
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
                "‚Ä¢ –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å Google API\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ: /connect_calendar"
            )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ: /connect_calendar"
        )


# Alternative handler for users who send just the code without command
@router.message(F.text.regexp(r'^[a-zA-Z0-9/_-]{20,}$'))
async def handle_oauth_code(message: types.Message, state: FSMContext):
    """
    Handle OAuth authorization code sent as plain text
    """
    # Check if we're expecting an OAuth code
    data = await state.get_data()
    stored_state = data.get('oauth_state')
    
    if not stored_state:
        # Not in OAuth flow, ignore
        return
    
    auth_code = message.text.strip()
    
    await message.answer(
        f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!\n\n"
        f"–ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥ –æ—Ç Google, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>/oauth_callback {auth_code} {stored_state}</code>\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–¥", 
                callback_data=f"process_oauth_{auth_code}_{stored_state}"
            )],
            [types.InlineKeyboardButton(
                text="‚ùå –≠—Ç–æ –Ω–µ –∫–æ–¥ Google", 
                callback_data="ignore_oauth_code"
            )]
        ])
    )


@router.callback_query(F.data.startswith("process_oauth_"))
async def cq_process_oauth_code(callback: types.CallbackQuery, state: FSMContext):
    """Process OAuth code from callback"""
    await callback.answer()
    
    data_parts = callback.data.split("_", 3)
    if len(data_parts) < 4:
        await callback.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return
    
    auth_code = data_parts[2]
    oauth_state = data_parts[3]
    
    # Process like the command handler
    try:
        await callback.message.edit_text("üîÑ –û–±–º–µ–Ω–∏–≤–∞—é –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞...")
        
        tokens = await google_oauth.exchange_code_for_tokens(auth_code, oauth_state)
        
        if tokens:
            await callback.message.edit_text(
                "‚úÖ <b>Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</b>\n\n"
                "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ —Å–µ—Å—Å–∏–π\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏\n"
                "‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º\n\n"
                "üí° –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.",
                reply_markup=get_calendar_disconnect_keyboard()
            )
            
            # Clear OAuth state from FSM
            await state.update_data(oauth_state=None)
            
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ: /connect_calendar"
            )
    
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–Ω–æ–≤–æ: /connect_calendar"
        )


@router.callback_query(F.data == "ignore_oauth_code")
async def cq_ignore_oauth_code(callback: types.CallbackQuery, state: FSMContext):
    """Ignore the OAuth code detection"""
    await callback.answer()
    await callback.message.delete()


@router.callback_query(F.data == "disconnect_calendar")
async def cq_disconnect_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Handle calendar disconnection request"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üîå <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ Google Calendar</b>\n\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:\n"
        "‚Ä¢ –°–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –±—É–¥–µ—Ç –æ—Ç–æ–∑–≤–∞–Ω\n"
        "‚Ä¢ –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="confirm_disconnect")],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_disconnect")]
        ])
    )


@router.callback_query(F.data == "confirm_disconnect")
async def cq_confirm_disconnect(callback: types.CallbackQuery, state: FSMContext):
    """Confirm calendar disconnection"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    try:
        success = await google_oauth.revoke_user_access(user_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ Google Calendar —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.\n\n"
                "üîó –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect_calendar"
            )
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫–ª—é—á–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∑—ã–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤.\n\n"
                "üîó –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect_calendar"
            )
    
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}\n\n"
            "üîó –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect_calendar"
        )


@router.callback_query(F.data == "cancel_disconnect")
async def cq_cancel_disconnect(callback: types.CallbackQuery, state: FSMContext):
    """Cancel calendar disconnection"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úÖ Google Calendar –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º.\n\n"
        "üìÖ –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Å–µ—Å—Å–∏–π.",
        reply_markup=get_calendar_disconnect_keyboard()
    )


@router.message(Command("calendar_status"))
async def cmd_calendar_status(message: types.Message, state: FSMContext):
    """
    Check Google Calendar connection status
    """
    user_id = message.from_user.id
    
    try:
        is_connected = await google_oauth.check_user_connected(user_id)
        
        if is_connected:
            await message.answer(
                "‚úÖ <b>Google Calendar –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
                "üìÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
                "üîê –¢–æ–∫–µ–Ω—ã: –í–∞–ª–∏–¥–Ω—ã\n"
                "‚ö° –§—É–Ω–∫—Ü–∏–∏: –î–æ—Å—Ç—É–ø–Ω—ã\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º:",
                reply_markup=get_calendar_disconnect_keyboard()
            )
        else:
            await message.answer(
                "‚ùå <b>Google Calendar –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
                "üìÖ –°—Ç–∞—Ç—É—Å: –ù–µ –∞–∫—Ç–∏–≤–µ–Ω\n"
                "üîê –¢–æ–∫–µ–Ω—ã: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
                "‚ö° –§—É–Ω–∫—Ü–∏–∏: –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
                "üîó –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect_calendar"
            )
    
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 