"""
Enhanced Capture Handlers - Stable version with improved UX
Working replacement for the original capture flow
"""
import logging
from typing import Dict, List, Optional

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from states.user_states import CaptureStates, EventEditStates
from services.enhanced_capture_flow import EnhancedCaptureFlow
from services.session_manager import SessionManager
from services.database import get_active_session

logger = logging.getLogger(__name__)
router = Router()
enhanced_flow = EnhancedCaptureFlow()


# ==============================================
# MAIN CAPTURE COMMAND
# ==============================================

@router.message(Command("capture_chat"))
async def cmd_start_enhanced_capture(message: types.Message, state: FSMContext):
    """Enhanced version of capture_chat with better UX"""
    user_id = message.from_user.id
    logger.info(f"Enhanced capture_chat called by user {user_id}")
    
    try:
        # Clear any existing state
        await state.clear()
        
        # Check for existing sessions
        existing_session = await get_active_session(user_id)
        if existing_session:
            # User has active session
            message_count = len(existing_session.messages) if existing_session.messages else 0
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data="continue_capture"),
                    InlineKeyboardButton(text="üÜï –ù–æ–≤–∞ —Å–µ—Å—ñ—è", callback_data="restart_capture")
                ],
                [
                    InlineKeyboardButton(text="üìä –ê–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ—á–Ω–æ—ó", callback_data=f"analyze_current"),
                ],
                [
                    InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_capture")
                ]
            ])
            
            await message.answer(
                "üîÑ **–£ –≤–∞—Å —î –∞–∫—Ç–∏–≤–Ω–∞ —Å–µ—Å—ñ—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è**\n\n"
                f"üìä ID —Å–µ—Å—ñ—ó: {existing_session.id}\n"
                f"‚è∞ –ü–æ—á–∞—Ç–æ: {existing_session.start_time.strftime('%H:%M')}\n"
                f"üìù –ó—ñ–±—Ä–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {message_count}\n\n"
                "–©–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
                reply_markup=keyboard
            )
            await state.set_state(CaptureStates.CAPTURING)
            await state.update_data(session_id=existing_session.id)
            return
        
        # Start new session
        session = await SessionManager.start_capture_session(user_id, state)
        
        if not session:
            await message.answer(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó**\n\n"
                "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è.\n"
                "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥."
            )
            return
        
        # Success - show instructions
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è", callback_data="finish_capture")
            ],
            [
                InlineKeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="show_progress"),
                InlineKeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó", callback_data="session_status")
            ],
            [
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_capture")
            ]
        ])
        
        await message.answer(
            "‚úÖ **–°–ï–°–Ü–Ø –ó–ê–•–û–ü–õ–ï–ù–ù–Ø –†–û–ó–ü–û–ß–ê–¢–ê**\n\n"
            "üéØ **–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:**\n"
            "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —Ñ–∞–π–ª–∏\n"
            "‚Ä¢ –ü–µ—Ä–µ—Å–ª—ñ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö —á–∞—Ç—ñ–≤\n" 
            "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–±—É–¥—É—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ)\n"
            "‚Ä¢ –ö–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è\"\n\n"
            "üìù **–Ø –∑–±–∏—Ä–∞—é:**\n"
            "‚Ä¢ –î–∞—Ç–∏ —Ç–∞ —á–∞—Å–∏ –ø–æ–¥—ñ–π\n"
            "‚Ä¢ –ú—ñ—Å—Ü—è –∑—É—Å—Ç—Ä—ñ—á–µ–π —Ç–∞ –∞–¥—Ä–µ—Å–∏\n"
            "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏\n"
            "‚Ä¢ –í–∞–∂–ª–∏–≤—ñ –¥–æ–º–æ–≤–ª–µ–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –î–µ–¥–ª–∞–π–Ω–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n"
            "‚ö°Ô∏è –ü–æ—á–Ω—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...",
            reply_markup=keyboard
        )
        
        await state.set_state(CaptureStates.CAPTURING)
        await state.update_data(session_id=session.id, message_count=0)
        
        logger.info(f"Enhanced capture session {session.id} started for user {user_id}")
        
    except Exception as e:
        logger.error(f"Enhanced capture failed for user {user_id}: {e}")
        await state.clear()
        
        await message.answer(
            "‚ùå **–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è: {str(e)}\n\n"
            "üîß –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )


# ==============================================
# MESSAGE CAPTURE HANDLERS  
# ==============================================

@router.message(CaptureStates.CAPTURING, F.content_type.in_(['text', 'voice', 'audio', 'document']))
async def handle_enhanced_captured_message(message: types.Message, state: FSMContext):
    """Handle captured messages with enhanced processing"""
    user_id = message.from_user.id
    
    try:
        # Get session data
        state_data = await state.get_data()
        session_id = state_data.get('session_id')
        message_count = state_data.get('message_count', 0)
        
        if not session_id:
            logger.warning(f"No session_id found for user {user_id}")
            await message.answer("‚ùå –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
            await state.clear()
            return
        
        # Process different message types
        message_text = ""
        
        if message.content_type == 'text':
            message_text = message.text or ""
            
        elif message.content_type in ['voice', 'audio']:
            # Handle voice messages
            await message.answer("üé§ –†–æ–∑–ø—ñ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            try:
                from services.transcription import transcribe_audio
                message_text = await transcribe_audio(message) or ""
                if message_text:
                    await message.answer(f"‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: \"{message_text[:100]}...\"")
                else:
                    await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å")
                    return
            except Exception as e:
                logger.error(f"Voice transcription failed: {e}")
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É")
                return
                
        elif message.content_type == 'document':
            # Handle document uploads
            await message.answer("üìÑ –û–±—Ä–æ–±–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç...")
            try:
                doc_name = message.document.file_name if message.document else "–ù–µ–≤—ñ–¥–æ–º–∏–π –¥–æ–∫—É–º–µ–Ω—Ç"
                message_text = f"–î–æ–∫—É–º–µ–Ω—Ç: {doc_name}"
                await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name}")
            except Exception as e:
                logger.error(f"Document processing failed: {e}")
                await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç")
                return
        
        # Add to session if we have valid text
        if message_text.strip():
            success = await SessionManager.add_message_to_session(user_id, message_text, state)
            
            if success:
                # Update message count
                message_count += 1
                await state.update_data(message_count=message_count)
                
                # Show progress every 5 messages
                if message_count % 5 == 0:
                    await message.answer(
                        f"üìä **–ü—Ä–æ–≥—Ä–µ—Å –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è**\n\n"
                        f"‚úÖ –ó—ñ–±—Ä–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {message_count}\n"
                        f"üîÑ –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ó–∞–≤–µ—Ä—à–∏—Ç–∏\""
                    )
            else:
                await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Å–µ—Å—ñ—ó")
        else:
            await message.answer("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –¥–æ–¥–∞–Ω–æ")
            
    except Exception as e:
        logger.error(f"Error handling enhanced captured message: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")


# ==============================================
# CAPTURE CONTROL HANDLERS
# ==============================================

@router.callback_query(F.data == "finish_capture", CaptureStates.CAPTURING)
async def cq_finish_enhanced_capture(callback: types.CallbackQuery, state: FSMContext):
    """Finish capture and start enhanced analysis"""
    user_id = callback.from_user.id
    
    try:
        # End capture session
        session = await SessionManager.end_capture_session(user_id, state)
        
        if not session:
            await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ—Å—ñ—é –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è")
            return
        
        # Get conversation text for analysis
        conversation_text = session.get_full_text()
        
        if not conversation_text.strip():
            await callback.message.edit_text(
                "‚ö†Ô∏è **–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É**\n\n"
                "–°–µ—Å—ñ—è –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–±—ñ–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏.\n"
                "–ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –∑ /capture_chat"
            )
            await state.clear()
            return
        
        # Start enhanced analysis
        results = await enhanced_flow.start_analysis(conversation_text, callback, state)
        
        if results.get('success', False):
            await enhanced_flow.show_results_for_review(callback, state, results)
        else:
            error_msg = results.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É')
            await callback.message.edit_text(f"‚ùå {error_msg}")
            await state.clear()
            
    except Exception as e:
        logger.error(f"Error finishing enhanced capture: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è")
        await state.clear()


@router.callback_query(F.data == "cancel_capture", CaptureStates.CAPTURING)
async def cq_cancel_enhanced_capture(callback: types.CallbackQuery, state: FSMContext):
    """Cancel capture session"""
    user_id = callback.from_user.id
    
    try:
        await SessionManager.cancel_session(user_id, state)
        await callback.message.edit_text(
            "‚ùå **–°–µ—Å—ñ—é –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ**\n\n"
            "–í—Å—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é –∑ /capture_chat"
        )
        
    except Exception as e:
        logger.error(f"Error canceling enhanced capture: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è")


@router.callback_query(F.data == "continue_capture", CaptureStates.CAPTURING)
async def cq_continue_enhanced_capture(callback: types.CallbackQuery, state: FSMContext):
    """Continue existing capture session"""
    await callback.message.edit_text(
        "üîÑ **–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è**\n\n"
        "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó.\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è\" –∫–æ–ª–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–µ."
    )


@router.callback_query(F.data == "restart_capture")
async def cq_restart_enhanced_capture(callback: types.CallbackQuery, state: FSMContext):
    """Restart capture with new session"""
    user_id = callback.from_user.id
    
    try:
        # Cancel existing session
        await SessionManager.cancel_session(user_id, state)
        
        # Start new session
        session = await SessionManager.start_capture_session(user_id, state)
        
        if session:
            await callback.message.edit_text(
                "üÜï **–ù–æ–≤–∞ —Å–µ—Å—ñ—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞**\n\n"
                "–°—Ç–∞—Ä–∞ —Å–µ—Å—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –ü–æ—á–Ω—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó."
            )
            await state.update_data(session_id=session.id, message_count=0)
        else:
            await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é")
            
    except Exception as e:
        logger.error(f"Error restarting enhanced capture: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É")


@router.callback_query(F.data == "show_progress", CaptureStates.CAPTURING)
async def cq_show_enhanced_progress(callback: types.CallbackQuery, state: FSMContext):
    """Show current capture progress"""
    try:
        state_data = await state.get_data()
        message_count = state_data.get('message_count', 0)
        session_id = state_data.get('session_id', 'N/A')
        
        await callback.answer(
            f"üìä –°–µ—Å—ñ—è #{session_id}\n"
            f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {message_count}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞",
            show_alert=True
        )
        
    except Exception as e:
        logger.error(f"Error showing progress: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É")


# ==============================================
# ANALYSIS RESULTS HANDLERS
# ==============================================

@router.callback_query(F.data == "confirm_all_events", CaptureStates.REVIEWING_RESULTS)
async def cq_confirm_all_enhanced_events(callback: types.CallbackQuery, state: FSMContext):
    """Confirm and save all events to calendar"""
    try:
        await enhanced_flow.save_events_to_calendar(callback, state)
    except Exception as e:
        logger.error(f"Error confirming events: {e}")
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π")


@router.callback_query(F.data == "edit_events_menu", CaptureStates.REVIEWING_RESULTS)
async def cq_edit_enhanced_events_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show events editing menu"""
    try:
        state_data = await state.get_data()
        session_data = state_data.get('session_data', {})
        events = session_data.get('events', [])
        
        if not events:
            await callback.answer("–ù–µ–º–∞—î –ø–æ–¥—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
            return
        
        # Create keyboard for event editing
        keyboard_rows = []
        
        for i, event in enumerate(events[:5]):  # Max 5 events
            event_title = event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            button_text = f"‚úèÔ∏è {event_title[:20]}..." if len(event_title) > 20 else f"‚úèÔ∏è {event_title}"
            keyboard_rows.append([
                InlineKeyboardButton(text=button_text, callback_data=f"edit_event:{event.get('id', i)}")
            ])
        
        keyboard_rows.extend([
            [
                InlineKeyboardButton(text="‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ", callback_data="confirm_all_events"),
                InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑", callback_data="retry_analysis")
            ],
            [
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_capture")
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        await callback.message.edit_text(
            "‚úèÔ∏è **–†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ü–û–î–Ü–ô**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π:",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"Error showing edit menu: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é")


@router.callback_query(F.data.startswith("edit_event:"))
async def cq_edit_enhanced_specific_event(callback: types.CallbackQuery, state: FSMContext):
    """Edit specific event"""
    try:
        event_id = callback.data.split(":")[1]
        await enhanced_flow.handle_event_editing(callback, state, event_id)
    except Exception as e:
        logger.error(f"Error editing event: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó")


@router.callback_query(F.data == "retry_analysis", CaptureStates.REVIEWING_RESULTS)
async def cq_retry_enhanced_analysis(callback: types.CallbackQuery, state: FSMContext):
    """Retry analysis with improved prompts"""
    try:
        state_data = await state.get_data()
        session_data = state_data.get('session_data', {})
        conversation_text = session_data.get('conversation_text', '')
        
        if not conversation_text:
            await callback.answer("–ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É")
            return
        
        # Restart analysis
        results = await enhanced_flow.start_analysis(conversation_text, callback, state)
        
        if results.get('success', False):
            await enhanced_flow.show_results_for_review(callback, state, results)
        else:
            error_msg = results.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É')
            await callback.message.edit_text(f"‚ùå {error_msg}")
            
    except Exception as e:
        logger.error(f"Error retrying analysis: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É") 