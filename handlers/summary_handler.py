"""
Summary Handler - /summary command with FSM
"""
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from services.analysis import GPTAnalysisService
from config import SUMMARY_STYLES

logger = logging.getLogger(__name__)
router = Router()


class SummaryStates(StatesGroup):
    """States for summary command flow"""
    WAITING_FOR_TEXT = State()


@router.message(Command("summary"))
async def cmd_summary(message: types.Message, state: FSMContext):
    """
    üöÄ PRODUCTION READY: /summary command
    Accepts text input and returns summary
    """
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    logger.info(f"üöÄ /summary called by user {user_id}")
    
    try:
        await state.clear()  # Clean previous state
        
        # Check if text provided with command
        if not message.text:
            message.text = "/summary"
        
        command_text = message.text[8:].strip()  # Remove "/summary "
        
        if command_text:
            # Text provided directly with command
            await process_summary_request(message, command_text, state)
        else:
            # No text provided - enter FSM state to wait for text
            await state.set_state(SummaryStates.WAITING_FOR_TEXT)
            
            keyboard = create_summary_waiting_keyboard()
            
            await message.answer(
                "üìù **SUMMARY MODE**\n\n"
                "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ:\n\n"
                "üìÑ **–ü—ñ–¥—Ç—Ä–∏–º—É—î:**\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                "‚Ä¢ –î–æ–≤–≥—ñ –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∏ —Ç–∞ —Å—Ç–∞—Ç—Ç—ñ\n"
                "‚Ä¢ –ë—É–¥—å-—è–∫–∏–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
                "‚ö°Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –≤—ñ–¥–º—ñ–Ω—É...",
                reply_markup=keyboard
            )
            
        logger.info(f"‚úÖ Summary command processed for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Summary command failed for user {user_id}: {e}")
        await state.clear()
        
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /summary**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–∂–∏–º —Ä–µ–∑—é–º–µ: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help"
        )


@router.message(SummaryStates.WAITING_FOR_TEXT, F.content_type == 'text', ~F.text.startswith('/'))
async def handle_summary_text_input(message: types.Message, state: FSMContext):
    """Handle text input in summary waiting state (exclude commands)"""
    if not message.from_user or not message.text:
        return
    
    user_id = message.from_user.id
    text_input = message.text
    
    logger.info(f"üìù Received summary text from user {user_id}, length: {len(text_input)}")
    
    try:
        await process_summary_request(message, text_input, state)
        
    except Exception as e:
        logger.error(f"‚ùå Summary text processing failed for user {user_id}: {e}")
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel"
        )


async def process_summary_request(message: types.Message, input_text: str, state: FSMContext):
    """Process summary request with progress indication"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Validate input
    if len(input_text.strip()) < 20:
        await message.answer(
            "‚ö†Ô∏è **–ó–∞–º–∞–ª–æ —Ç–µ–∫—Å—Ç—É**\n\n"
            "–î–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤.\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—ñ–ª—å—à–µ —Ç–µ–∫—Å—Ç—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel"
        )
        return
    
    # Show progress
    progress_message = await message.answer(
        "üîç **–ê–Ω–∞–ª—ñ–∑—É—é —Ç–µ–∫—Å—Ç...**\n\n"
        "‚è≥ –°—Ç–≤–æ—Ä—é—é —Ä–µ–∑—é–º–µ –∑ –¥–æ–ø–æ–º–æ–≥–æ—é AI...\n"
        "üìä –í–∏—Ç—è–≥—É—é –∫–ª—é—á–æ–≤—ñ –º–æ–º–µ–Ω—Ç–∏...\n"
        "üîÑ –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        # Get user settings for summary style
        user_summary_style = await get_user_summary_style(user_id)
        
        # Create summary using GPT service
        gpt_service = GPTAnalysisService()
        summary = await gpt_service.generate_summary_only(input_text)
        
        # Clear FSM state
        await state.clear()
        
        # Format result
        text_length = len(input_text)
        summary_length = len(summary)
        compression_ratio = round((1 - summary_length / text_length) * 100)
        
        result_text = (
            "‚úÖ **–†–ï–ó–Æ–ú–ï –ì–û–¢–û–í–û**\n\n"
            f"üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n{summary}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª: {text_length} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            f"‚Ä¢ –†–µ–∑—é–º–µ: {summary_length} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            f"‚Ä¢ –°—Ç–∏—Å–Ω–µ–Ω–Ω—è: {compression_ratio}%\n"
            f"‚Ä¢ –°—Ç–∏–ª—å: {user_summary_style['name']}"
        )
        
        # Delete progress message
        try:
            await progress_message.delete()
        except:
            pass
        
        # Send result with keyboard
        keyboard = create_summary_result_keyboard()
        await message.answer(result_text, reply_markup=keyboard)
        
        logger.info(f"‚úÖ Summary completed for user {user_id}: {summary_length} chars")
        
    except Exception as e:
        logger.error(f"‚ùå Summary generation failed for user {user_id}: {e}")
        
        # Delete progress message
        try:
            await progress_message.delete()
        except:
            pass
        
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        
        await state.clear()


async def get_user_summary_style(user_id: int) -> dict:
    """Get user's preferred summary style"""
    try:
        from services.database import get_user_setting
        style_key = await get_user_setting(user_id, 'summary_style', 'default')
        return SUMMARY_STYLES.get(style_key, SUMMARY_STYLES['default'])
    except:
        return SUMMARY_STYLES['default']


# ==============================================
# CALLBACK HANDLERS
# ==============================================

# Handle commands in summary mode
@router.message(SummaryStates.WAITING_FOR_TEXT, F.text.startswith('/'))
async def handle_commands_in_summary_mode(message: types.Message, state: FSMContext):
    """Handle commands when in summary waiting state"""
    if not message.from_user or not message.text:
        return
    
    command = message.text.lower()
    if command in ['/cancel', '/start']:
        await state.clear()
        await message.answer(
            "‚ùå **–†–µ–∂–∏–º —Ä–µ–∑—é–º–µ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /summary —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
    else:
        await message.answer(
            "‚ö†Ô∏è **–í–∏ –≤ —Ä–µ–∂–∏–º—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ**\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–µ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è –≤–∏—Ö–æ–¥—É."
        )


@router.callback_query(F.data == "cancel_summary", SummaryStates.WAITING_FOR_TEXT)
async def cq_cancel_summary(callback: types.CallbackQuery, state: FSMContext):
    """Cancel summary mode"""
    await state.clear()
    
    if callback.message:
        await callback.message.edit_text(
            "‚ùå **–†–µ–∂–∏–º —Ä–µ–∑—é–º–µ –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /summary —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
    await callback.answer()


@router.callback_query(F.data == "new_summary")
async def cq_new_summary(callback: types.CallbackQuery, state: FSMContext):
    """Start new summary session"""
    await state.set_state(SummaryStates.WAITING_FOR_TEXT)
    
    keyboard = create_summary_waiting_keyboard()
    
    if callback.message:
        await callback.message.edit_text(
            "üìù **–ù–û–í–ò–ô SUMMARY**\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—é–º–µ:\n\n"
            "‚ö°Ô∏è –ì–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–º–∞—Ç–∏ –≤–∞—à —Ç–µ–∫—Å—Ç...",
            reply_markup=keyboard
        )
    await callback.answer()


@router.callback_query(F.data == "summary_settings")  
async def cq_summary_settings(callback: types.CallbackQuery):
    """Show summary settings"""
    await callback.answer(
        "‚öôÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /settings –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∏–ª—é —Ä–µ–∑—é–º–µ",
        show_alert=True
    )


# ==============================================
# HELPER FUNCTIONS
# ==============================================

def create_summary_waiting_keyboard():
    """Create keyboard for waiting for text input"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_summary")
    builder.button(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="summary_settings")
    
    return builder.as_markup()


def create_summary_result_keyboard():
    """Create keyboard for summary result"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –ù–æ–≤–µ —Ä–µ–∑—é–º–µ", callback_data="new_summary")
    builder.button(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="summary_settings")
    
    return builder.as_markup() 