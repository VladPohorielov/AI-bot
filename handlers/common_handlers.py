# handlers/common_handlers.py
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from keyboards.inline import get_main_settings_keyboard
from states.user_states import SettingsStates
from config import DEFAULT_LANGUAGE, DEFAULT_SUMMARY_STYLE, SUPPORTED_LANGUAGES, \
    SUMMARY_STYLES

router = Router()


def get_user_settings(user_id: int, dp_user_settings: dict):
    if user_id not in dp_user_settings:
        dp_user_settings[user_id] = {
            "language": DEFAULT_LANGUAGE,
            "summary_style": DEFAULT_SUMMARY_STYLE,
            "summary_style_name": SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"]
        }
    elif 'summary_style_name' not in dp_user_settings[user_id]:
        current_style_key = dp_user_settings[user_id].get('summary_style', DEFAULT_SUMMARY_STYLE)
        dp_user_settings[user_id]['summary_style_name'] = \
        SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]
    return dp_user_settings[user_id]


@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, user_settings: dict, whisper_model: tuple):
    await state.clear()
    current_user_settings = get_user_settings(message.from_user.id, user_settings)

    user_name = message.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    _, device = whisper_model

    current_summary_style_name = current_user_settings.get('summary_style_name', SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE]["name"])

    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(user_name)}!\n"
        f"–Ø {hbold('Briefly')} ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º—ñ—á–Ω–∏–∫.\n\n"
        "–í–º—ñ—î:\n"
        "1Ô∏è‚É£ üó£Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ —Ç–∞ –∞—É–¥—ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "2Ô∏è‚É£ üìù –°—Ç–≤–æ—Ä—é–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—ñ summary –∑ —Ç–µ–∫—Å—Ç—É —ñ –ø–µ—Ä–µ–ø–∏—Å–æ–∫\n"
        "3Ô∏è‚É£ üìÖ –í–∏—Ç—è–≥–∞—Ç–∏ –ø–æ–¥—ñ—ó –∑ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ —ñ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É Google Calendar\n\n"
        f"üîπ –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {hbold(SUPPORTED_LANGUAGES.get(current_user_settings['language'], '–ê–≤—Ç–æ'))}\n"
        f"üîπ –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å —Ä–µ–∑—é–º–µ: {hbold(current_summary_style_name)}\n"
        f"üî¨ Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: {hbold(device.upper())}\n\n"
        "‚û°Ô∏è –ì–æ–≤–æ—Ä—ñ—Ç—å. –ü–∏—à—ñ—Ç—å. –û—Ç—Ä–∏–º—É–π—Ç–µ —Å—É—Ç—å.\n"
        "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    await message.answer(text)


@router.message(Command("help"))
async def cmd_help(message: types.Message, user_settings: dict):
    current_user_settings = get_user_settings(message.from_user.id, user_settings)
    current_lang_name = SUPPORTED_LANGUAGES.get(current_user_settings['language'], "–ê–≤—Ç–æ")

    current_style_key = current_user_settings.get('summary_style', DEFAULT_SUMMARY_STYLE)
    current_style_name = SUMMARY_STYLES.get(current_style_key, SUMMARY_STYLES[DEFAULT_SUMMARY_STYLE])["name"]

    text = (
        f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ {hbold('Briefly')}:</b>\n\n"
        "üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "üó£Ô∏è –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–∏—Ö summary –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫\n"
        "üìÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Google Calendar\n\n"
        "üé§ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1.  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é\n"
        "2.  –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ\n"
        "3.  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /capture_chat –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π\n"
        "4.  –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar (/connect_calendar) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (/settings):</b>\n"
        f"- <b>–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:</b> –°–µ–π—á–∞—Å \"{current_lang_name}\". –í–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.\n"
        f"- <b>–°—Ç–∏–ª—å —Ä–µ–∑—é–º–µ:</b> –°–µ–π—á–∞—Å \"{current_style_name}\". –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è.\n"
        "- <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å:</b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º Google Calendar\n"
        "- <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:</b> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/capture_chat ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞—Ö–≤–∞—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏\n"
        "/my_sessions ‚Äî –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–µ—Å—Å–∏–π\n"
        "/connect_calendar ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar\n\n"
        "‚ùå <b>–û—Ç–º–µ–Ω–∞:</b> –ö–æ–º–∞–Ω–¥–∞ /cancel –ø—Ä–µ—Ä–≤–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."
    )
    await message.answer(text)


@router.message(Command("settings"))
async def cmd_settings(message: types.Message, state: FSMContext):
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Briefly</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
                         reply_markup=get_main_settings_keyboard())


@router.callback_query(F.data == "settings:close", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_settings_close(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üëå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã.")
    await callback.answer()


@router.message(Command("cancel"))
@router.callback_query(F.data == "cancel_state")
async def cmd_cancel(event: types.Message | types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        text = "ü§∑ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        if isinstance(event, types.Message):
            await event.answer(text)
        else:
            await event.answer(text, show_alert=True)
        return

    await state.clear()
    text = "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    if isinstance(event, types.Message):
        await event.answer(text)
    elif isinstance(event, types.CallbackQuery) and event.message:
        try:
            await event.message.edit_text(text)
        except Exception:
            await event.message.answer(text)
        await event.answer()


@router.message(F.text.startswith('/'))
async def unhandled_command_fallback(message: types.Message):
    await message.reply("üòï –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /help.")