"""
Capture Chat Command Handler - NEW FEATURE
Handles /capture_chat command without breaking existing structure
"""
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.user_states import CaptureStates

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("capture_chat"))
async def cmd_capture_chat(message: types.Message, state: FSMContext):
    """
    üöÄ PRODUCTION READY: /capture_chat command handler
    Initiates conversation capture session
    """
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    logger.info(f"üéØ /capture_chat command called by user {user_id}")
    
    try:
        # Set FSM state to wait for conversation text
        await state.set_state(CaptureStates.CAPTURING)
        
        # Create keyboard with cancel option
        keyboard = create_capture_waiting_keyboard()
        
        await message.answer(
            "üìù **–†–ï–ñ–ò–ú –ó–ê–•–û–ü–õ–ï–ù–ù–Ø –ü–ï–†–ï–ü–ò–°–ö–ò**\n\n"
            "üéØ **–©–æ —Ä–æ–±–∏—Ç–∏:**\n"
            "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∞–±–æ —Ä–æ–∑–º–æ–≤–∏\n"
            "‚Ä¢ –Ø –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É—é —ó—ó —Ç–∞ –∑–Ω–∞–π–¥—É –ø–æ–¥—ñ—ó\n"
            "‚Ä¢ –°—Ç–≤–æ—Ä—é summary —Ç–∞ –≤–∏—Ç—è–≥–Ω—É –≤—Å—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ\n\n"
            "‚ö°Ô∏è **–û—á—ñ–∫—É—é –≤–∞—à —Ç–µ–∫—Å—Ç...**",
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ Capture chat mode activated for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Capture chat command failed for user {user_id}: {e}")
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /capture_chat**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–µ–∂–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help"
        )


@router.message(CaptureStates.CAPTURING, F.content_type == 'text', ~F.text.startswith('/'))
async def handle_capture_text_input(message: types.Message, state: FSMContext):
    """Handle text input in capture mode (exclude commands)"""
    if not message.from_user or not message.text:
        return
    
    user_id = message.from_user.id
    text_input = message.text
    
    logger.info(f"üìù Received capture text from user {user_id}, length: {len(text_input)}")
    
    try:
        await process_capture_request(message, text_input, state)
        
    except Exception as e:
        logger.error(f"‚ùå Capture text processing failed for user {user_id}: {e}")
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel"
        )


# Handle commands in capture mode
@router.message(CaptureStates.CAPTURING, F.text.startswith('/'))
async def handle_commands_in_capture_mode(message: types.Message, state: FSMContext):
    """Handle commands when in capture waiting state"""
    if not message.from_user or not message.text:
        return
    
    command = message.text.lower()
    if command in ['/cancel', '/start']:
        await state.clear()
        await message.answer(
            "‚ùå **–†–µ–∂–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
    else:
        await message.answer(
            "‚ö†Ô∏è **–í–∏ –≤ —Ä–µ–∂–∏–º—ñ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è –≤–∏—Ö–æ–¥—É."
        )


async def process_capture_request(message: types.Message, input_text: str, state: FSMContext):
    """Process capture request with enhanced analysis"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Validate input
    if len(input_text.strip()) < 20:
        await message.answer(
            "‚ö†Ô∏è **–ó–∞–º–∞–ª–æ —Ç–µ–∫—Å—Ç—É**\n\n"
            "–î–ª—è —è–∫—ñ—Å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤.\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—ñ–ª—å—à–µ —Ç–µ–∫—Å—Ç—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /cancel"
        )
        return
    
    # Show progress
    progress_message = await message.answer(
        "üîç **–ê–Ω–∞–ª—ñ–∑—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É...**\n\n"
        "‚è≥ –°—Ç–≤–æ—Ä—é—é summary...\n"
        "üìÖ –®—É–∫–∞—é –ø–æ–¥—ñ—ó —Ç–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ...\n"
        "üîÑ –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        # Clear FSM state
        await state.clear()
        
        # Import existing services to use current functionality
        from services.analysis import GPTAnalysisService
        from services.event_extractor_new import EventExtractorService
        
        # 1. Generate summary (existing functionality)
        gpt_service = GPTAnalysisService()
        summary = await gpt_service.generate_summary_only(input_text)
        
        # 2. Extract events (NEW functionality)
        extractor = EventExtractorService()
        events = await extractor.extract_events(input_text)
        
        # Delete progress message
        try:
            await progress_message.delete()
        except:
            pass
        
        # Send summary first
        summary_text = (
            "üìã **SUMMARY –ü–ï–†–ï–ü–ò–°–ö–ò**\n\n"
            f"{summary}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {len(input_text)} —Å–∏–º–≤–æ–ª—ñ–≤ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ"
        )
        
        await message.answer(summary_text)
        
        # Send events if found
        if events:
            for event in events:
                await send_event_card(message, event)
        else:
            await message.answer(
                "‚ÑπÔ∏è **–ü–æ–¥—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n"
                "–£ –ø–µ—Ä–µ–ø–∏—Å—Ü—ñ –Ω–µ–º–∞—î –∑–≥–∞–¥–æ–∫ –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∞–±–æ –ø–æ–¥—ñ—ó."
            )
        
        logger.info(f"‚úÖ Capture completed for user {user_id}: {len(events)} events found")
        
    except Exception as e:
        logger.error(f"‚ùå Capture processing failed for user {user_id}: {e}")
        
        # Delete progress message
        try:
            await progress_message.delete()
        except:
            pass
        
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –ø–µ—Ä–µ–ø–∏—Å–∫–∏**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )


async def send_event_card(message: types.Message, event: dict):
    """Send formatted event card with action buttons"""
    event_text = (
        f"üìÖ **–ü–æ–¥—ñ—è: {event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}**\n"
        f"üóì –î–∞—Ç–∞: {event.get('date', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è∞ –ß–∞—Å: {event.get('time', '–ù–µ –≤–∫–∞–∑–∞–Ω–∏–π')}\n"
        f"üìç –ú—ñ—Å—Ü–µ: {event.get('location', '–ù–µ –≤–∫–∞–∑–∞–Ω–µ')}\n"
        f"‚è≥ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {event.get('duration', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {event.get('payment', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}\n"
        f"üîπ –Ü–Ω—à–µ: {event.get('notes', '–ù–µ–º–∞—î')}"
    )
    
    keyboard = create_event_card_keyboard(event.get('id', ''))
    
    await message.answer(event_text, reply_markup=keyboard)


# ==============================================
# CALLBACK HANDLERS
# ==============================================

@router.callback_query(F.data == "cancel_capture")
async def cq_cancel_capture(callback: types.CallbackQuery, state: FSMContext):
    """Cancel capture mode"""
    await state.clear()
    
    if callback.message:
        await callback.message.edit_text(
            "‚ùå **–†–µ–∂–∏–º –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
    await callback.answer()


@router.callback_query(F.data.startswith("event_add_"))
async def cq_add_event_to_calendar(callback: types.CallbackQuery):
    """Add event to Google Calendar"""
    if not callback.data:
        return
        
    event_id = callback.data.replace("event_add_", "")
    
    # TODO: Implement calendar integration
    await callback.answer(
        "üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è /connect_calendar",
        show_alert=True
    )


@router.callback_query(F.data.startswith("event_edit_"))
async def cq_edit_event(callback: types.CallbackQuery):
    """Edit event details"""
    if not callback.data:
        return
        
    event_id = callback.data.replace("event_edit_", "")
    
    await callback.answer(
        "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó",
        show_alert=True
    )


@router.callback_query(F.data.startswith("event_cancel_"))
async def cq_cancel_event(callback: types.CallbackQuery):
    """Cancel/dismiss event"""
    if callback.message:
        await callback.message.edit_text(
            "‚ùå **–ü–æ–¥—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /capture_chat –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É."
        )
    await callback.answer()


# ==============================================
# HELPER FUNCTIONS
# ==============================================

def create_capture_waiting_keyboard():
    """Create keyboard for waiting for text input"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_capture")
    
    return builder.as_markup()


def create_event_card_keyboard(event_id: str):
    """Create keyboard for event card"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–æ–¥–∞—Ç–∏ —É Calendar", callback_data=f"event_add_{event_id}")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"event_edit_{event_id}")
    builder.button(text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data=f"event_cancel_{event_id}")
    
    builder.adjust(1)  # Each button on a new line
    
    return builder.as_markup() 