"""
ChatGPT Handler - Direct interaction with OpenAI ChatGPT
Allows users to chat directly with GPT using /ask command
"""
import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from services.analysis import GPTAnalysisService

logger = logging.getLogger(__name__)
router = Router()


class ChatGPTStates(StatesGroup):
    """States for ChatGPT conversation"""
    CHATTING = State()


@router.message(Command("ask"))
async def cmd_ask_chatgpt(message: types.Message, state: FSMContext):
    """
    üöÄ PRODUCTION READY: /ask command for ChatGPT interaction
    Usage: /ask [prompt] or /ask (then send prompt)
    """
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    logger.info(f"ü§ñ /ask command called by user {user_id}")
    
    try:
        await state.clear()  # Clean previous state
        
        # Check if prompt provided with command
        if not message.text:
            message.text = "/ask"
        
        prompt_text = message.text[4:].strip()  # Remove "/ask "
        
        if prompt_text:
            # Prompt provided directly with command
            await process_chatgpt_request(message, prompt_text, state)
        else:
            # No prompt provided - enter chat mode
            await state.set_state(ChatGPTStates.CHATTING)
            
            keyboard = create_chatgpt_keyboard()
            
            await message.answer(
                "ü§ñ **CHATGPT –†–ï–ñ–ò–ú**\n\n"
                "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ ChatGPT!\n\n"
                "üí¨ **–©–æ –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏:**\n"
                "‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç–∏ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è\n"
                "‚Ä¢ –ü—Ä–æ—Å–∏—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –∑ –∫–æ–¥–æ–º\n"
                "‚Ä¢ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∏\n"
                "‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                "‚Ä¢ –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n\n"
                "‚ö°Ô∏è –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–º—Ç...",
                reply_markup=keyboard
            )
            
        logger.info(f"‚úÖ ChatGPT command processed for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå ChatGPT command failed for user {user_id}: {e}")
        await state.clear()
        
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /ask**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ ChatGPT —Ä–µ–∂–∏–º: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help"
        )


@router.message(ChatGPTStates.CHATTING, F.content_type == 'text')
async def handle_chatgpt_conversation(message: types.Message, state: FSMContext):
    """Handle text input in ChatGPT conversation state"""
    if not message.from_user or not message.text:
        return
    
    user_id = message.from_user.id
    user_prompt = message.text
    
    logger.info(f"ü§ñ ChatGPT prompt from user {user_id}, length: {len(user_prompt)}")
    
    try:
        await process_chatgpt_request(message, user_prompt, state, keep_chat_mode=True)
        
    except Exception as e:
        logger.error(f"‚ùå ChatGPT conversation failed for user {user_id}: {e}")
        await message.answer(
            "‚ùå **–ü–æ–º–∏–ª–∫–∞ ChatGPT**\n\n"
            f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel"
        )


async def process_chatgpt_request(message: types.Message, user_prompt: str, state: FSMContext, keep_chat_mode: bool = False):
    """Process ChatGPT request with progress indication"""
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # Validate input
    if len(user_prompt.strip()) < 3:
        await message.answer(
            "‚ö†Ô∏è **–ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º—Ç**\n\n"
            "–ù–∞–ø–∏—à—ñ—Ç—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—Ç.\n"
            "–ú—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏."
        )
        return
    
    # Show progress
    progress_message = await message.answer(
        "ü§ñ **ChatGPT –¥—É–º–∞—î...**\n\n"
        "‚è≥ –û–±—Ä–æ–±–ª—è—é –≤–∞—à –∑–∞–ø–∏—Ç...\n"
        "üß† –ì–µ–Ω–µ—Ä—É—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å...\n"
        "üîÑ –ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        # Use OpenAI GPT service for direct conversation
        gpt_service = GPTAnalysisService()
        
        if not gpt_service.client:
            await progress_message.edit_text(
                "‚ùå **OpenAI API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π**\n\n"
                "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ChatGPT –ø–æ—Ç—Ä—ñ–±–µ–Ω API –∫–ª—é—á OpenAI.\n\n"
                "üí° –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /summary –¥–ª—è G4F (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ) —Ä–µ–∑—é–º–µ."
            )
            return
        
        # Create conversation with ChatGPT
        try:
            response = await gpt_service.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {
                        "role": "system", 
                        "content": (
                            "–í–∏ ChatGPT –≤ Telegram –±–æ—Ç—ñ Briefly. "
                            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
                            "–Ø–∫—â–æ –∑–∞–ø–∏—Ç—É—é—Ç—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é - –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é. "
                            "–ë—É–¥—å—Ç–µ —Å—Ç–∏—Å–ª–∏–º–∏, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º–∏."
                        )
                    },
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=1000,
                temperature=0.7,
                timeout=30.0
            )
            
            chatgpt_response = response.choices[0].message.content
            
            if not keep_chat_mode:
                await state.clear()
            
            # Format response
            result_text = (
                f"ü§ñ **ChatGPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å:**\n\n"
                f"{chatgpt_response}\n\n"
                f"üí≠ **–í–∞—à –∑–∞–ø–∏—Ç:** {user_prompt[:100]}{'...' if len(user_prompt) > 100 else ''}"
            )
            
            # Delete progress message
            try:
                await progress_message.delete()
            except:
                pass
            
            # Send result with keyboard
            keyboard = create_chatgpt_result_keyboard(keep_chat_mode)
            
            # Split long responses
            if len(result_text) > 4000:
                # Send response part by part
                await message.answer(f"ü§ñ **ChatGPT –≤—ñ–¥–ø–æ–≤—ñ–¥—å:**\n\n{chatgpt_response}")
                await message.answer(
                    f"üí≠ **–í–∞—à –∑–∞–ø–∏—Ç:** {user_prompt[:200]}{'...' if len(user_prompt) > 200 else ''}",
                    reply_markup=keyboard
                )
            else:
                await message.answer(result_text, reply_markup=keyboard)
            
            logger.info(f"‚úÖ ChatGPT response sent to user {user_id}: {len(chatgpt_response)} chars")
            
        except Exception as api_error:
            logger.error(f"‚ùå OpenAI API error for user {user_id}: {api_error}")
            
            # Delete progress message
            try:
                await progress_message.delete()
            except:
                pass
            
            await message.answer(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ ChatGPT API**\n\n"
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {str(api_error)}\n\n"
                "üí° **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**\n"
                "‚Ä¢ –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º\n"
                "‚Ä¢ API –∫–ª—é—á –Ω–µ–¥—ñ–π—Å–Ω–∏–π\n\n"
                "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /summary"
            )
        
    except Exception as e:
        logger.error(f"‚ùå ChatGPT processing failed for user {user_id}: {e}")
        
        # Delete progress message
        try:
            await progress_message.delete()
        except:
            pass
        
        await message.answer(
            "‚ùå **–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞**\n\n"
            f"–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}\n\n"
            "üîÑ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        
        if not keep_chat_mode:
            await state.clear()


# ==============================================
# CALLBACK HANDLERS
# ==============================================

@router.callback_query(F.data == "continue_chat")
async def cq_continue_chat(callback: types.CallbackQuery, state: FSMContext):
    """Continue ChatGPT conversation"""
    await state.set_state(ChatGPTStates.CHATTING)
    
    if callback.message:
        await callback.message.edit_text(
            "ü§ñ **–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ ChatGPT**\n\n"
            "üí¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–º—Ç...",
            reply_markup=create_chatgpt_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "new_chat")
async def cq_new_chat(callback: types.CallbackQuery, state: FSMContext):
    """Start new ChatGPT conversation"""
    await state.set_state(ChatGPTStates.CHATTING)
    
    if callback.message:
        await callback.message.edit_text(
            "ü§ñ **–ù–æ–≤–∏–π ChatGPT —á–∞—Ç**\n\n"
            "üí¨ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–º—Ç...",
            reply_markup=create_chatgpt_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "exit_chat")
async def cq_exit_chat(callback: types.CallbackQuery, state: FSMContext):
    """Exit ChatGPT conversation mode"""
    await state.clear()
    
    if callback.message:
        await callback.message.edit_text(
            "‚úÖ **ChatGPT —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /ask —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.\n"
            "–ê–±–æ /summary –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ."
        )
    
    await callback.answer()


# ==============================================
# HELPER FUNCTIONS
# ==============================================

def create_chatgpt_keyboard():
    """Create keyboard for ChatGPT chat mode"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —á–∞—Ç", callback_data="exit_chat")
    builder.button(text="‚ÑπÔ∏è –ü–æ—Ä–∞–¥–∏", callback_data="chatgpt_tips")
    
    return builder.as_markup()


def create_chatgpt_result_keyboard(chat_mode: bool = False):
    """Create keyboard for ChatGPT result"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    
    if chat_mode:
        builder.button(text="üí¨ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —á–∞—Ç", callback_data="continue_chat")
        builder.button(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="exit_chat")
    else:
        builder.button(text="üîÑ –ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data="new_chat")
        builder.button(text="üìù Summary —Ä–µ–∂–∏–º", callback_data="new_summary")
    
    return builder.as_markup()


@router.callback_query(F.data == "chatgpt_tips")
async def cq_chatgpt_tips(callback: types.CallbackQuery):
    """Show ChatGPT usage tips"""
    tips_text = (
        "üí° –ü–û–†–ê–î–ò –î–õ–Ø ChatGPT:\n\n"
        "üéØ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏\n"
        "üíª –í–∫–∞–∑—É–π—Ç–µ –º–æ–≤—É –∫–æ–¥—É\n"
        "üìù –ó–∞–∑–Ω–∞—á—Ç–µ —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç—É\n"
        "üåç –í–∫–∞–∂—ñ—Ç—å –º–æ–≤–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—É"
    )
    
    await callback.answer(tips_text, show_alert=True) 