import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hbold

from config import SUPPORTED_LANGUAGES, SUMMARY_STYLES
from handlers.common_handlers import get_user_settings
from keyboards.inline import (get_language_keyboard,
                              get_main_settings_keyboard,
                              get_summary_style_keyboard,
                              get_calendar_settings_menu_keyboard,
                              get_auto_create_confirmation_keyboard,
                              get_disconnect_calendar_confirmation_keyboard,
                              get_notifications_settings_keyboard,
                              get_data_retention_keyboard)
from states.user_states import SettingsStates
from services.database import get_user_calendar_status, get_user_setting, update_user_setting, disconnect_user_calendar, cleanup_user_data

logger = logging.getLogger(__name__)
router = Router()
logger.info("settings_handlers.router created.")


@router.callback_query(F.data == "settings:main")
async def cq_back_to_main_settings(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"cq_back_to_main_settings called by user {callback.from_user.id}")
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Briefly</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_main_settings_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "settings:language", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_select_language_menu(callback: types.CallbackQuery, state: FSMContext, user_settings: dict):
    user_id = callback.from_user.id
    logger.info(f"cq_select_language_menu called by user {user_id}")
    user_prefs = get_user_settings(user_id, user_settings)
    await state.set_state(SettingsStates.CHOOSING_LANGUAGE)
    await callback.message.edit_text(
        "üó£Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ:",
        reply_markup=get_language_keyboard(user_prefs["language"])
    )
    await callback.answer()


@router.callback_query(SettingsStates.CHOOSING_LANGUAGE, F.data.startswith("select_lang:"))
async def cq_set_language(callback: types.CallbackQuery, state: FSMContext, user_settings: dict):
    user_id = callback.from_user.id
    lang_code = callback.data.split(":")[1]
    logger.info(f"cq_set_language called by user {user_id}, lang_code: {lang_code}")

    if lang_code not in SUPPORTED_LANGUAGES:
        logger.warning(f"Invalid lang_code '{lang_code}' from user {user_id}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞.", show_alert=True)
        return

    user_prefs = get_user_settings(user_id, user_settings)
    user_prefs["language"] = lang_code
    logger.info(f"User {user_id} language set to {lang_code}")

    await callback.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SUPPORTED_LANGUAGES[lang_code]}", show_alert=False)
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Briefly</b>\n\n–Ø–∑—ã–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {hbold(SUPPORTED_LANGUAGES[lang_code])}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_main_settings_keyboard()
    )


@router.callback_query(F.data == "settings:summary_style", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_select_summary_style_menu(callback: types.CallbackQuery, state: FSMContext, user_settings: dict):
    user_id = callback.from_user.id
    logger.info(f"cq_select_summary_style_menu called by user {user_id}")
    user_prefs = get_user_settings(user_id, user_settings)
    await state.set_state(SettingsStates.CHOOSING_SUMMARY_STYLE)
    await callback.message.edit_text(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ —Ä–µ–∑—é–º–µ:",
        reply_markup=get_summary_style_keyboard(user_prefs["summary_style"])
    )
    await callback.answer()


@router.callback_query(SettingsStates.CHOOSING_SUMMARY_STYLE, F.data.startswith("select_style:"))
async def cq_set_summary_style(callback: types.CallbackQuery, state: FSMContext, user_settings: dict):
    user_id = callback.from_user.id
    style_code = callback.data.split(":")[1]
    logger.info(f"cq_set_summary_style called by user {user_id}, style_code: {style_code}")

    if style_code not in SUMMARY_STYLES:
        logger.warning(f"Invalid style_code '{style_code}' from user {user_id}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∏–ª—å —Ä–µ–∑—é–º–µ.", show_alert=True)
        return

    user_prefs = get_user_settings(user_id, user_settings)
    user_prefs["summary_style"] = style_code
    user_prefs["summary_style_name"] = SUMMARY_STYLES[style_code]["name"]
    logger.info(f"User {user_id} summary style set to {style_code}")

    await callback.answer(f"‚úÖ –°—Ç–∏–ª—å —Ä–µ–∑—é–º–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SUMMARY_STYLES[style_code]['name']}", show_alert=False)
    await state.set_state(SettingsStates.MAIN_SETTINGS_MENU)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Briefly</b>\n\n–°—Ç–∏–ª—å —Ä–µ–∑—é–º–µ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {hbold(SUMMARY_STYLES[style_code]['name'])}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
        reply_markup=get_main_settings_keyboard()
    )


# Calendar Settings Handlers
@router.callback_query(F.data == "settings:calendar", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_calendar_settings_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show calendar settings submenu"""
    user_id = callback.from_user.id
    logger.info(f"cq_calendar_settings_menu called by user {user_id}")
    
    try:

        
        # Get calendar status
        calendar_status = await get_user_calendar_status(user_id)
        
        # Build status text
        if calendar_status['connected']:
            status_text = (
                "üìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
                "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω\n"
            )
            if calendar_status['calendar_id']:
                status_text += f"üìç <b>ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è:</b> <code>{calendar_status['calendar_id'][:20]}...</code>\n"
            
            auto_status = "–≤–∫–ª—é—á–µ–Ω–æ" if calendar_status['auto_create_events'] else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            status_text += f"‚öôÔ∏è <b>–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:</b> {auto_status}\n\n"
            status_text += "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            status_text = (
                "üìÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
                "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
                "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Google Calendar –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤.\n\n"
                "üí° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
        
        keyboard = get_calendar_settings_menu_keyboard(
            calendar_status['connected'],
            calendar_status['auto_create_events']
        )
        
        await callback.message.edit_text(status_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in calendar settings menu: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.",
            reply_markup=get_main_settings_keyboard()
        )
        await callback.answer()


@router.callback_query(F.data == "toggle_auto_create")
async def cq_toggle_auto_create(callback: types.CallbackQuery, state: FSMContext):
    """Toggle auto-create events setting"""
    user_id = callback.from_user.id
    logger.info(f"cq_toggle_auto_create called by user {user_id}")
    
    try:

        
        current_setting = await get_user_setting(user_id, 'auto_create_events', False)
        new_setting = not current_setting
        
        confirmation_text = (
            "‚öôÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîÑ <b>–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:</b> {current_setting} ‚Üí {new_setting}\n\n"
        )
        
        if new_setting:
            confirmation_text += (
                "‚úÖ –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è:\n"
                "‚Ä¢ –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π\n"
                "‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö –≤ Google Calendar\n"
                "‚Ä¢ –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            )
        else:
            confirmation_text += (
                "‚òëÔ∏è –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è:\n"
                "‚Ä¢ –°–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ Briefly\n"
                "‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –≤—Ä—É—á–Ω—É—é\n"
                "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n"
            )
        
        confirmation_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?"
        
        # Store the new setting in FSM for confirmation
        await state.update_data(pending_auto_create=new_setting)
        
        await callback.message.edit_text(
            confirmation_text,
            reply_markup=get_auto_create_confirmation_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error toggling auto create: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data == "confirm_auto_create")
async def cq_confirm_auto_create(callback: types.CallbackQuery, state: FSMContext):
    """Confirm auto-create setting change"""
    user_id = callback.from_user.id
    
    try:

        
        # Get pending setting from FSM
        data = await state.get_data()
        new_setting = data.get('pending_auto_create', False)
        
        # Update database
        success = await update_user_setting(user_id, 'auto_create_events', new_setting)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if new_setting else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            await callback.answer(f"‚úÖ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π {status_text}")
            
            # Return to calendar settings
            await cq_calendar_settings_menu(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # Clear pending data
        await state.update_data(pending_auto_create=None)
        
    except Exception as e:
        logger.error(f"Error confirming auto create: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")


@router.callback_query(F.data == "cancel_auto_create")
async def cq_cancel_auto_create(callback: types.CallbackQuery, state: FSMContext):
    """Cancel auto-create setting change"""
    # Clear pending data
    await state.update_data(pending_auto_create=None)
    
    # Return to calendar settings  
    await cq_calendar_settings_menu(callback, state)
    await callback.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data == "disconnect_calendar")
async def cq_disconnect_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Show calendar disconnect confirmation"""
    user_id = callback.from_user.id
    
    try:

        
        await callback.message.edit_text(
            "üîå <b>–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
            "‚ö†Ô∏è –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n"
            "‚Ä¢ –°–≤—è–∑—å —Å Google Calendar –±—É–¥–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–∞\n"
            "‚Ä¢ –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã\n"
            "‚Ä¢ –†–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n\n"
            "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å?",
            reply_markup=get_disconnect_calendar_confirmation_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing disconnect confirmation: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")


@router.callback_query(F.data == "confirm_disconnect_calendar")
async def cq_confirm_disconnect_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Confirm calendar disconnection"""
    user_id = callback.from_user.id
    
    try:

        
        # Disconnect calendar in database
        success = await disconnect_user_calendar(user_id)
        
        if success:
            await callback.answer("üîå –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # Show updated calendar settings
            await cq_calendar_settings_menu(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è")
        
    except Exception as e:
        logger.error(f"Error disconnecting calendar: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è")


@router.callback_query(F.data == "cancel_disconnect_calendar")
async def cq_cancel_disconnect_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Cancel calendar disconnection"""
    # Return to calendar settings
    await cq_calendar_settings_menu(callback, state)
    await callback.answer("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data == "connect_calendar_from_settings")
async def cq_connect_calendar_from_settings(callback: types.CallbackQuery, state: FSMContext):
    """Redirect to calendar connection from settings"""
    await callback.message.edit_text(
        "üîó <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect_calendar –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar."
    )
    await callback.answer()


# Notifications Settings Handlers  
@router.callback_query(F.data == "settings:notifications", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_notifications_settings_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show notifications settings submenu"""
    user_id = callback.from_user.id
    logger.info(f"cq_notifications_settings_menu called by user {user_id}")
    
    try:
        # Get current notifications settings
        notifications_enabled = await get_user_setting(user_id, 'notifications_enabled', True)
        event_notifications = await get_user_setting(user_id, 'event_notifications', True)
        session_notifications = await get_user_setting(user_id, 'session_notifications', True)
        error_notifications = await get_user_setting(user_id, 'error_notifications', True)
        
        # Build status text
        main_status = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        status_text = (
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            f"üì± <b>–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {main_status}\n\n"
        )
        
        if notifications_enabled:
            status_text += "üí° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
            if event_notifications:
                status_text += "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n"
            else:
                status_text += "‚Ä¢ ‚òëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö\n"
            
            if session_notifications:
                status_text += "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π\n"
            else:
                status_text += "‚Ä¢ ‚òëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–π\n"
            
            if error_notifications:
                status_text += "‚Ä¢ ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
            else:
                status_text += "‚Ä¢ ‚òëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö\n"
        else:
            status_text += "‚ÑπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        
        status_text += "\nüí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:"
        
        keyboard = get_notifications_settings_keyboard(notifications_enabled)
        
        await callback.message.edit_text(status_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in notifications settings menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


# Data Retention Settings Handlers
@router.callback_query(F.data == "settings:data_retention", SettingsStates.MAIN_SETTINGS_MENU)
async def cq_data_retention_settings_menu(callback: types.CallbackQuery, state: FSMContext):
    """Show data retention settings submenu"""
    user_id = callback.from_user.id
    logger.info(f"cq_data_retention_settings_menu called by user {user_id}")
    
    try:
        # Get current retention setting
        retention_days = await get_user_setting(user_id, 'data_retention_days', 30)
        
        # Format period text
        if retention_days == 0:
            period_text = "‚ôæÔ∏è –Ω–∞–≤—Å–µ–≥–¥–∞"
        elif retention_days == 7:
            period_text = "üìÖ 1 –Ω–µ–¥–µ–ª—è"
        elif retention_days == 30:
            period_text = "üìÖ 1 –º–µ—Å—è—Ü"
        elif retention_days == 90:
            period_text = "üìÖ 3 –º–µ—Å—è—Ü–∞"
        elif retention_days == 365:
            period_text = "üìÖ 1 –≥–æ–¥"
        else:
            period_text = f"üìÖ {retention_days} –¥–Ω–µ–π"
        
        status_text = (
            "üìö <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"‚è∞ <b>–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b> {period_text}\n\n"
            "üìã <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è:</b>\n"
            "‚Ä¢ –°–µ—Å—Å–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –∏—Ö –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –æ–±–º–µ–Ω–∞\n\n"
            "üóëÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞:</b>\n"
            "‚Ä¢ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è\n"
            "‚Ä¢ –°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è\n\n"
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è:"
        )
        
        keyboard = get_data_retention_keyboard(retention_days)
        
        await callback.message.edit_text(status_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in data retention settings menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")


@router.callback_query(F.data.startswith("set_retention_"))
async def cq_set_retention_period(callback: types.CallbackQuery, state: FSMContext):
    """Set data retention period"""
    user_id = callback.from_user.id
    retention_days = int(callback.data.split("_")[2])
    
    try:
        # Save retention setting to database
        await update_user_setting(user_id, 'data_retention_days', retention_days)
        
        if retention_days == 0:
            period_text = "‚ôæÔ∏è —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ–≥–¥–∞"
        elif retention_days == 7:
            period_text = "üìÖ 1 –Ω–µ–¥–µ–ª—è"
        elif retention_days == 30:
            period_text = "üìÖ 1 –º–µ—Å—è—Ü"
        elif retention_days == 90:
            period_text = "üìÖ 3 –º–µ—Å—è—Ü–∞"
        elif retention_days == 365:
            period_text = "üìÖ 1 –≥–æ–¥"
        else:
            period_text = f"üìÖ {retention_days} –¥–Ω–µ–π"
        
        await callback.answer(f"‚úÖ –ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {period_text}")
        
        # Return to data retention menu with updated settings
        await cq_data_retention_settings_menu(callback, state)
        
    except Exception as e:
        logger.error(f"Error setting retention period: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–∏–æ–¥–∞")


# Additional handlers for missing functionality
@router.callback_query(F.data == "settings:close")
async def cq_close_settings(callback: types.CallbackQuery, state: FSMContext):
    """Close settings menu"""
    await state.clear()
    await callback.message.delete()
    await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã")


@router.callback_query(F.data == "calendar_status")
async def cq_calendar_status_info(callback: types.CallbackQuery, state: FSMContext):
    """Show detailed calendar status information"""
    user_id = callback.from_user.id
    
    try:
        calendar_status = await get_user_calendar_status(user_id)
        
        if calendar_status['connected']:
            info_text = (
                "‚úÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
                "üîó <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> –ê–∫—Ç–∏–≤–Ω–æ\n"
            )
            if calendar_status['calendar_id']:
                info_text += f"üìÖ <b>ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è:</b> <code>{calendar_status['calendar_id']}</code>\n"
            
            auto_status = "–≤–∫–ª—é—á–µ–Ω–æ" if calendar_status['auto_create_events'] else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            info_text += f"‚öôÔ∏è <b>–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:</b> {auto_status}\n"
            info_text += f"üîë <b>–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:</b> {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω' if calendar_status['has_refresh_token'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
            info_text += "üí° –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é."
        else:
            info_text = (
                "‚ùå <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω</b>\n\n"
                "üìã <b>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                "1. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å'\n"
                "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Google\n"
                "3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
                "üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>\n"
                "‚Ä¢ –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            )
        
        await callback.answer(info_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"Error showing calendar status: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.callback_query(F.data == "toggle_notifications")
async def cq_toggle_notifications(callback: types.CallbackQuery, state: FSMContext):
    """Toggle notifications on/off"""
    user_id = callback.from_user.id
    
    try:
        # Get current setting
        notifications_enabled = await get_user_setting(user_id, 'notifications_enabled', True)
        new_setting = not notifications_enabled
        
        # Save new setting
        await update_user_setting(user_id, 'notifications_enabled', new_setting)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_setting else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await callback.answer(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
        
        # Refresh notifications menu
        await cq_notifications_settings_menu(callback, state)
        
    except Exception as e:
        logger.error(f"Error toggling notifications: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")


@router.callback_query(F.data.startswith("_notifications"))
async def cq_notification_category_settings(callback: types.CallbackQuery, state: FSMContext):
    """Handle specific notification category settings"""
    category = callback.data.replace("_notifications", "")
    
    await callback.answer(
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.",
        show_alert=True
    )


@router.callback_query(F.data == "retention_info")
async def cq_retention_info(callback: types.CallbackQuery, state: FSMContext):
    """Show detailed information about data retention"""
    info_text = (
        "üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "üóÇÔ∏è <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è:</b>\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç—ã —Å–µ—Å—Å–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n"
        "‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ\n"
        "‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π\n\n"
        "üóëÔ∏è <b>–ß—Ç–æ —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</b>\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å—Ç–∞—Ä—à–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "‚Ä¢ –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º–∏ —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –∏–∑ –ë–î)\n"
        "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏\n\n"
        "‚úÖ <b>–ß—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞:</b>\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n"
        "‚Ä¢ –°–æ–±—ã—Ç–∏—è –≤ Google Calendar\n\n"
        "üîÑ <b>–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏:</b>\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 03:00 UTC"
    )
    
    await callback.answer(info_text, show_alert=True)


@router.callback_query(F.data == "custom_retention")
async def cq_custom_retention(callback: types.CallbackQuery, state: FSMContext):
    """Handle custom retention period setting"""
    await callback.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 7, 30, 90, 365 –¥–Ω–µ–π –∏–ª–∏ '–Ω–∞–≤—Å–µ–≥–¥–∞'.",
        show_alert=True
    )


@router.callback_query(F.data == "select_calendar")
async def cq_select_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Handle calendar selection"""
    await callback.answer(
        "üìÖ –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Calendar.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect_calendar –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
        show_alert=True
    )
