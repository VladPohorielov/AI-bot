#!/usr/bin/env python3
"""
Test script to verify event extraction functionality
"""
import asyncio
import sys
import os
import logging

# Add current directory to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Setup logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

from services.event_extraction import extract_events_from_text

async def test_event_extraction():
    print("üß™ Testing event extraction service...")
    
    # Test conversation similar to the screenshot
    test_text = """
    –ö–∞—Ç—è: –ü—Ä–∏–≤—ñ—Ç! –¢–∏ –∑–∞–≤—Ç—Ä–∞ –≤—ñ–ª—å–Ω–∏–π –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É –∑–π–æ–º–∫—É –≤ –û–¥–µ—Å—ñ? –ü–æ—Ç—Ä—ñ–±–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –∫—ñ–ª—å–∫–∞ –≥–æ–¥–∏–Ω.
    
    –ê–Ω–¥—Ä—ñ–π: –ü—Ä–∏–≤—ñ—Ç! –¢–∞–∫, –∑–∞–≤—Ç—Ä–∞ —è–∫—Ä–∞–∑ –º–∞—é –≤—ñ–∫–Ω–æ. –©–æ —Å–∞–º–µ –ø–ª–∞–Ω—É—î—Ç—å—Å—è –∑–Ω—ñ–º–∞—Ç–∏?
    
    –ö–∞—Ç—è: –†–æ–±–∏–º–æ –ø—Ä–æ–º–æ –¥–ª—è –∫–∞–≤'—è—Ä–Ω—ñ –Ω–∞ –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫—ñ–π. –ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤—ñ–¥–∑–Ω—è—Ç–∏ —ñ–Ω—Ç–µ—Ä'—î—Ä, –ø—Ä–æ—Ü–µ—Å –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∫–∞–≤–∏ + –∫—ñ–ª—å–∫–∞ –∫–∞–¥—Ä—ñ–≤ –∑ –º–æ–¥–µ–ª—è–º–∏ –Ω–∞ –≤—É–ª–∏—Ü—ñ.
    
    –ê–Ω–¥—Ä—ñ–π: –ó–≤—É—á–∏—Ç—å —Ü—ñ–∫–∞–≤–æ. –°–∫—ñ–ª—å–∫–∏ –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –ø–æ —á–∞—Å—É?
    
    –ö–∞—Ç—è: –î–µ—Å—å 3-4 –≥–æ–¥–∏–Ω–∏. –ø–æ—á–∏–Ω–∞—î–º–æ –æ 10:00. –ü–æ—Ç—Ä—ñ–±–µ–Ω —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ç–æ—Ä + –º–æ–∂–ª–∏–≤–æ –ø–∞—Ä—É –∫–∞–¥—Ä—ñ–≤ –∑ –¥—Ä–æ–Ω–∞, —è–∫—â–æ –º–∞—î—à.
    
    –ê–Ω–¥—Ä—ñ–π: –°—Ç–∞–± —î, –¥—Ä–æ–Ω —Ç–µ–∂ –º–æ–∂—É –≤–∑—è—Ç–∏. –ü–æ –æ–ø–ª–∞—Ç—ñ?
    
    –ö–∞—Ç—è: 1500 –≥—Ä–Ω –∑–∞ –∑–π–æ–º–∫—É, –æ–ø–ª–∞—Ç–∞ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è.
    
    –ê–Ω–¥—Ä—ñ–π: –û–∫, –ø—ñ–¥—Ö–æ–¥–∏—Ç—å. –ê–¥—Ä–µ—Å—É —Å–∫–∏–Ω–µ—à?
    
    –ö–∞—Ç—è: –¢–∞–∫, –∫–∞–≤'—è—Ä–Ω—è "Brew&Go", –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 15. –Ø –±—É–¥—É –Ω–∞ –º—ñ—Å—Ü—ñ –∑ 9:45, —á–µ–∫–∞—Ç–∏–º—É –±—ñ–ª—è –≤—Ö–æ–¥—É.
    
    –ê–Ω–¥—Ä—ñ–π: –°—É–ø–µ—Ä, –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ —Ç–æ–¥—ñ –∑–∞–≤—Ç—Ä–∞!
    
    –ö–∞—Ç—è: –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –î—è–∫—É—é üôè
    """
    
    try:
        print("üîç Extracting events...")
        events = await extract_events_from_text(test_text)
        
        print(f"‚úÖ Events extracted: {len(events)}")
        
        if events:
            for i, event in enumerate(events, 1):
                print(f"\nüìÖ Event {i}:")
                print(f"  Title: {event.get('title')}")
                print(f"  Date: {event.get('date')}")
                print(f"  Time: {event.get('time')}")
                print(f"  Location: {event.get('location')}")
                print(f"  Participants: {event.get('participants')}")
                print(f"  Type: {event.get('type')}")
                print(f"  Priority: {event.get('priority')}")
        else:
            print("‚ùå No events found")
            
        return len(events) > 0
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(test_event_extraction())
    sys.exit(0 if success else 1) 