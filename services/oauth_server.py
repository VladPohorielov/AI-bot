"""
Simple OAuth callback server for handling Google Calendar OAuth redirects
"""
import asyncio
import sys
import os
from pathlib import Path
from aiohttp import web, ClientSession
from urllib.parse import parse_qs, urlparse
import logging

# Add parent directory to path to import config
sys.path.append(str(Path(__file__).parent.parent))

from config import GOOGLE_REDIRECT_URI
from services.google_oauth import GoogleOAuthService

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class OAuthCallbackServer:
    def __init__(self, port=8080):
        self.port = port
        self.oauth_service = GoogleOAuthService()
        self.app = web.Application()
        self.setup_routes()
    
    def setup_routes(self):
        """Setup HTTP routes"""
        self.app.router.add_get('/oauth/callback', self.handle_oauth_callback)
        self.app.router.add_get('/health', self.health_check)
        self.app.router.add_get('/', self.home)
    
    async def handle_oauth_callback(self, request):
        """Handle OAuth callback from Google"""
        try:
            # Get parameters from query string
            code = request.query.get('code')
            state = request.query.get('state')
            error = request.query.get('error')
            
            if error:
                logger.error(f"OAuth error: {error}")
                return web.Response(
                    text=f"""
                    <html>
                        <body style="font-family: Arial; text-align: center; padding: 50px;">
                            <h2>‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó</h2>
                            <p>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {error}</p>
                            <p>–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.</p>
                        </body>
                    </html>
                    """,
                    content_type='text/html',
                    status=400
                )
            
            if not code or not state:
                return web.Response(
                    text="""
                    <html>
                        <body style="font-family: Arial; text-align: center; padding: 50px;">
                            <h2>‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∑–∞–ø–∏—Ç</h2>
                            <p>–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.</p>
                        </body>
                    </html>
                    """,
                    content_type='text/html',
                    status=400
                )
            
            # Exchange code for tokens
            tokens = await self.oauth_service.exchange_code_for_tokens(code, state)
            
            if tokens:
                logger.info("OAuth tokens successfully exchanged")
                return web.Response(
                    text="""
                    <html>
                        <body style="font-family: Arial; text-align: center; padding: 50px;">
                            <h2>‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!</h2>
                            <p>Google Calendar —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ Telegram –±–æ—Ç–∞.</p>
                            <p>–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ —Ü–µ –≤—ñ–∫–Ω–æ —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–æ—Ç–∞.</p>
                            <script>
                                setTimeout(() => {
                                    window.close();
                                }, 3000);
                            </script>
                        </body>
                    </html>
                    """,
                    content_type='text/html'
                )
            else:
                logger.error("Failed to exchange OAuth code for tokens")
                return web.Response(
                    text="""
                    <html>
                        <body style="font-family: Arial; text-align: center; padding: 50px;">
                            <h2>‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±–º—ñ–Ω—É —Ç–æ–∫–µ–Ω—ñ–≤</h2>
                            <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é.</p>
                            <p>–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.</p>
                        </body>
                    </html>
                    """,
                    content_type='text/html',
                    status=500
                )
                
        except Exception as e:
            logger.error(f"Error in OAuth callback: {e}")
            return web.Response(
                text="""
                <html>
                    <body style="font-family: Arial; text-align: center; padding: 50px;">
                        <h2>‚ùå –í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h2>
                        <p>–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞.</p>
                    </body>
                </html>
                """,
                content_type='text/html',
                status=500
            )
    
    async def health_check(self, request):
        """Health check endpoint"""
        return web.json_response({'status': 'ok', 'service': 'oauth-callback-server'})
    
    async def home(self, request):
        """Home page"""
        return web.Response(
            text="""
            <html>
                <body style="font-family: Arial; text-align: center; padding: 50px;">
                    <h1>ü§ñ Telegram Calendar Bot</h1>
                    <h2>OAuth Callback Server</h2>
                    <p>–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –æ–±—Ä–æ–±–ª—è—Ç–∏ OAuth redirects.</p>
                    <p>–©–æ–± –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings —É –±–æ—Ç—ñ.</p>
                </body>
            </html>
            """,
            content_type='text/html'
        )

async def create_app():
    """Create and configure the web application"""
    server = OAuthCallbackServer()
    return server.app

async def main():
    """Run the OAuth callback server"""
    print("üöÄ –ó–∞–ø—É—Å–∫ OAuth callback —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üì° –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞: http://localhost:8080")
    print(f"üîó Callback URL: http://localhost:8080/oauth/callback")
    print("‚èπÔ∏è  –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    
    app = await create_app()
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()
    
    try:
        await asyncio.Future()  # Run forever
    except KeyboardInterrupt:
        print("\nüõë –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        await runner.cleanup()

if __name__ == '__main__':
    asyncio.run(main()) 