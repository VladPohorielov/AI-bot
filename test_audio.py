#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∞—É–¥—ñ–æ –æ–±—Ä–æ–±–∫–∏ –¥–ª—è Briefly –±–æ—Ç–∞
"""

import os
import sys
import subprocess
import shutil
import tempfile

def test_ffmpeg():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ FFmpeg"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FFmpeg...")
    
    # –ú–µ—Ç–æ–¥ 1: —á–µ—Ä–µ–∑ shutil.which
    ffmpeg_path = shutil.which('ffmpeg')
    if ffmpeg_path:
        print(f"‚úÖ FFmpeg –∑–Ω–∞–π–¥–µ–Ω–æ: {ffmpeg_path}")
    else:
        print("‚ùå FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ shutil.which")
    
    # –ú–µ—Ç–æ–¥ 2: –ø—Ä—è–º–∞ –∫–æ–º–∞–Ω–¥–∞
    try:
        result = subprocess.run(['ffmpeg', '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version_line = result.stdout.split('\n')[0]
            print(f"‚úÖ FFmpeg –ø—Ä–∞—Ü—é—î: {version_line}")
            return True
        else:
            print(f"‚ùå FFmpeg –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–æ–¥: {result.returncode}")
            print(f"Stderr: {result.stderr}")
            return False
    except FileNotFoundError:
        print("‚ùå FFmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ PATH")
        return False
    except subprocess.TimeoutExpired:
        print("‚ùå FFmpeg –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (timeout)")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É FFmpeg: {e}")
        return False


def test_whisper():
    """–¢–µ—Å—Ç Whisper"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Whisper...")
    
    try:
        import whisper
        print("‚úÖ –ú–æ–¥—É–ª—å whisper —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å...")
        model = whisper.load_model("base")
        print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ù–µ –≤–¥–∞—î—Ç—å—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ whisper: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: {e}")
        return False


def test_dependencies():
    """–¢–µ—Å—Ç –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...")
    
    dependencies = [
        'whisper',
        'torch',
        'aiogram',
        'openai',
        'google-auth',
        'google-auth-oauthlib',
        'google-auth-httplib2',
        'google-api-python-client',
        'sqlalchemy',
        'aiosqlite',
        'python-dotenv',
        'cryptography',
        'ffmpeg-python'
    ]
    
    missing = []
    for dep in dependencies:
        try:
            __import__(dep.replace('-', '_'))
            print(f"‚úÖ {dep}")
        except ImportError:
            print(f"‚ùå {dep}")
            missing.append(dep)
    
    if missing:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {', '.join(missing)}")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö: pip install " + " ".join(missing))
        return False
    else:
        print("\n‚úÖ –í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")
        return True


def test_audio_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ"""
    print("\nüîç –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ...")
    
    if not test_ffmpeg():
        print("‚ùå FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó")
        return False
    
    temp_ogg_path = None
    temp_wav_path = None
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π OGG —Ñ–∞–π–ª (—ñ–º—ñ—Ç–∞—Ü—ñ—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_ogg:
            temp_ogg_path = temp_ogg.name
            
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π WAV —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            temp_wav_path = temp_wav.name
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ 1 —Å–µ–∫—É–Ω–¥—É —Ç–∏—à—ñ —è–∫ —Ç–µ—Å—Ç–æ–≤–∏–π –∞—É–¥—ñ–æ
        cmd = [
            'ffmpeg', '-f', 'lavfi', '-i', 'anullsrc=duration=1',
            '-y', temp_ogg_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π OGG —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó OGG -> WAV
            cmd2 = ['ffmpeg', '-i', temp_ogg_path, '-y', temp_wav_path]
            result2 = subprocess.run(cmd2, capture_output=True, text=True, timeout=30)
            
            if result2.returncode == 0:
                print("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OGG -> WAV –ø—Ä–∞—Ü—é—î")
                return True
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {result2.stderr}")
                return False
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó: {e}")
        return False
    finally:
        # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        for path in [temp_ogg_path, temp_wav_path]:
            if path and os.path.exists(path):
                os.unlink(path)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("ü§ñ Briefly Bot - –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—É–¥—ñ–æ –æ–±—Ä–æ–±–∫–∏")
    print("=" * 50)
    
    tests = [
        ("Python –≤–µ—Ä—Å—ñ—è", lambda: print(f"Python {sys.version}")),
        ("FFmpeg", test_ffmpeg),
        ("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", test_dependencies),
        ("Whisper", test_whisper),
        ("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∞—É–¥—ñ–æ", test_audio_conversion)
    ]
    
    results = []
    for name, test_func in tests:
        print(f"\n{'='*20} {name} {'='*20}")
        try:
            if test_func():
                results.append((name, True))
            else:
                results.append((name, False))
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç—ñ {name}: {e}")
            results.append((name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print(f"\n{'='*50}")
    print("üìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 50)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"{name:20} {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(results)} —Ç–µ—Å—Ç—ñ–≤")
    
    if passed == len(results):
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏! –ë–æ—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    else:
        print("‚ö†Ô∏è –Ñ –ø—Ä–æ–±–ª–µ–º–∏. –î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤–∏—â–µ.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        for name, result in results:
            if not result:
                if "FFmpeg" in name:
                    print("- –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å FFmpeg: winget install ffmpeg")
                    print("- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å PowerShell –ø—ñ—Å–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è")
                elif "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ" in name:
                    print("- –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏: pip install -r requirements.txt")
                elif "Whisper" in name:
                    print("- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è: pip install openai-whisper")


if __name__ == "__main__":
    main() 